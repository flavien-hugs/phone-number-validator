name: Release
on:
  release:
    types:
      - published

jobs:
  pypi-publish:
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.x']
        poetry-version: [1.8.3]
        os: [ubuntu-latest]
    
    name: upload release to PyPI
    runs-on: ${{ matrix.os }}
    environment: release
    permissions:
      id-token: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: deps
        run: python -m pip install -U build
      
      - name: build
        run: python -m build
        
      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")
          
          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")
          
          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"
          
          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
      
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ steps.mint-token.outputs.api-token }}
