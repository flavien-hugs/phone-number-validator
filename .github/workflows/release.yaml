name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.x']
        os: [ubuntu-latest]

    name: Create release
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install pipx, Poetry and Upgrade pip/setuptools
        run: |
          python --version
          python -m pip install pipx
          python -m pipx ensurepath
          python -m pipx install poetry
          export PATH=$PATH:/root/.local/bin
          poetry env use python
          poetry run pip install --upgrade pip setuptools
          poetry install --no-root

      - name: Build package
        run: |
          poetry build
      
      - name: Get version from pyproject.toml
        id: get_version
        run: |
          version=$(poetry version --short)
          echo "VERSION=${version}" >> $GITHUB_ENV
      
      - name: Delete existing tag
        run: |
          git tag -d "${{ env.VERSION }}" || true
          git push origin --delete "${{ env.VERSION }}" || true
      
      - name: Create release
        if: steps.check_tag.outcome == 'success'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.version }}
          release_name: Release ${{ env.version }}
          body: |
            Changelog:
            - Description des modifications pour cette version.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_PYPI_TOKEN }}
      
      # - name: Publish package distributions to PyPI
      #  if: steps.get_version.outcome == 'success'
      #  uses: pypa/gh-action-pypi-publish@release/v1
      #  with:
      #    username: __token__
      #    password: ${{ secrets.PYPI_TOKEN }}
